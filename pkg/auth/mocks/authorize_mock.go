// Code generated by MockGen. DO NOT EDIT.
// Source: authorize.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorize is a mock of Authorize interface.
type MockAuthorize struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizeMockRecorder
}

// MockAuthorizeMockRecorder is the mock recorder for MockAuthorize.
type MockAuthorizeMockRecorder struct {
	mock *MockAuthorize
}

// NewMockAuthorize creates a new mock instance.
func NewMockAuthorize(ctrl *gomock.Controller) *MockAuthorize {
	mock := &MockAuthorize{ctrl: ctrl}
	mock.recorder = &MockAuthorizeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorize) EXPECT() *MockAuthorizeMockRecorder {
	return m.recorder
}

// CreateJWT mocks base method.
func (m *MockAuthorize) CreateJWT(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MockAuthorizeMockRecorder) CreateJWT(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*MockAuthorize)(nil).CreateJWT), userId)
}

// ParseJWT mocks base method.
func (m *MockAuthorize) ParseJWT(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockAuthorizeMockRecorder) ParseJWT(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockAuthorize)(nil).ParseJWT), token)
}
